#########################################################################
# General
#########################################################################
# Load all the standard plugins (Note: currently using symlink)
#nop %sh{
#    mkdir -p "$kak_config/autoload"
#    ln -s "$kak_runtime/autoload" "$kak_config/autoload/standard-library"
#}

# Use the system clipboard (replace with bellow with ver. July 2020)
#hook global RegisterModified '"' %{ nop %sh{
#    printf %s "$kak_main_reg_dquote" | xclip -in -selection clipboard >&- 2>&-
#}}
hook global NormalKey y|d|c %{ nop %sh{
    printf %s "$kak_main_reg_dquote" | xclip -in -selection clipboard >&- 2>&-
}}

# Paste before
map global user -docstring 'paste (before) from clipboard' P '!xclip -out -selection clipboard<ret>'

# Paste after
map global user -docstring 'paste (after) from clipboard' p '<a-!>xclip -out -selection clipboard<ret>'

# <tab> for completion
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        hook -once -always window InsertCompletionHide .* %{
            # Remape to 2 spaces instead of tabs
            map window insert <tab> '<space><space>'
            map window insert <s-tab> '<space><space>'
        }
    }
}


#########################################################################
# Kakoune user interface
#########################################################################
add-highlighter global/ number-lines -hlcursor

# Set 7 lines to the cursor - when moving vertivally using j/k
set global scrolloff 7,0

# Ignore case where searching
map global normal / ':exec /<ret>(?i)'

# Highlight search results
# add-highlighter global/search dynregex '%reg{/}' 0:search

# Show matching brackets when text indicator is over them
add-highlighter global/ show-matching

# Add git informations
hook global WinCreate .* %{ evaluate-commands %sh{
    is_work_tree=$(cd "$(dirname "${kak_buffile}")" && git rev-parse --is-inside-work-tree 2>/dev/null)
    if [ "${is_work_tree}" = 'true' ]; then
        # Branch name in status
        printf 'set-option window modelinefmt %%{%s}' "  %opt{modeline_git_branch} ${kak_opt_modelinefmt}"
    fi 
}}

hook global WinCreate ^[^*]+$ %{ evaluate-commands %sh{
    cd "$(dirname "${kak_buffile}")" && git ls-files --error-unmatch "${kak_bufname}" > /dev/null 2>&1
    is_git_tracked=$?
    if [ "${is_git_tracked}" -eq 0 ]; then
        # git diff status in gutter
        printf 'git show-diff'
    fi 
}}

hook global BufWritePost ^[^*]+$ %{ evaluate-commands %sh{
    cd "$(dirname "${kak_buffile}")" && git ls-files --error-unmatch "${kak_bufname}" > /dev/null 2>&1
    is_git_tracked=$?
    if [ "${is_git_tracked}" -eq 0 ]; then
        # Uodate git diff
        printf 'git update-diff'
    fi 
}}


#########################################################################
# Colors and Fonts
#########################################################################
colorscheme the_future2


#########################################################################
# Text, tab and indent related
#########################################################################
# Use 2 spaces instead of tabs
map global insert <tab> '<space><space>'

# 1 tab == 2 spaces
set-option global indentwidth 2

# Linebreak on 79 characters
hook global WinSetOption filetype=.* %{
    set window autowrap_column 79
    autowrap-enable
}

# Wrap lines
add-highlighter global/ wrap -indent -marker '→'


#########################################################################
# Moving around, tabs, windows and buffers
#########################################################################
# Return to last edit position when opening files (You want this!)
# Find a way to emulate it.


#########################################################################
## Language specific
#########################################################################
# Markdown
hook global WinSetOption filetype=markdown %{
    lint-enable
    set-option window lintcmd 'write-good --parse'
#    set-option window lintcmd 'mdl'
#    set-option window lintcmd 'proselint --compact'
    lint
}

hook global BufSetOption filetype=markdown %{
    set-option buffer formatcmd 'markdownfmt'
}


# Ruby
hook global WinSetOption filetype=ruby %{
    lint-enable
    set-option window lintcmd 'rubocop --format emacs'
    lint
}

hook global BufSetOption filetype=ruby %{
    set-option buffer formatcmd "rubocop -x -o /dev/null -s '${kak_buffile}' | sed -n '2,$p'"
}

# Shell
hook global WinSetOption filetype=sh %{
    lint-enable
    set-option window lintcmd 'shellcheck -fgcc -Cnever'
    lint
}

