#########################################################################
# General
#########################################################################
# Load all the standard plugins (Note: currently using symlink)
# nop %sh{
#     mkdir -p "$kak_config/autoload"
#     ln -s "$kak_runtime/autoload" "$kak_config/autoload/standard-library"
# }

# Plugins
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

plug "dracula/kakoune" theme

plug "lenormf/kakoune-extra" noload %{
    source "%val{config}/plugins/kakoune-extra/widgets/git-branch.kak"
    source "%val{config}/plugins/kakoune-extra/comnotes.kak"
} config %{
    # Add git informations
    hook global WinCreate .* %{ evaluate-commands %sh{
        is_work_tree=$(cd "$(dirname "${kak_buffile}")" && git rev-parse --is-inside-work-tree 2>/dev/null)

        if [ "${is_work_tree}" = 'true' ]; then
            # Branch name in status
            printf 'set-option window modelinefmt %%{%s}' "  %opt{modeline_git_branch} ${kak_opt_modelinefmt}"
        fi
    }}
}

plug "kakoune-editor/kakoune-extra-filetypes" noload %{
    source "%val{config}/plugins/kakoune-extra-filetypes/rc/conky.kak"
    source "%val{config}/plugins/kakoune-extra-filetypes/rc/git-commit-overflow.kak"
    source "%val{config}/plugins/kakoune-extra-filetypes/rc/mutt.kak"
}

plug "JJK96/kakoune-config" noload %{
    source "%val{config}/plugins/kakoune-config/autoload/html.kak"
    source "%val{config}/plugins/kakoune-config/autoload/css.kak"
    source "%val{config}/plugins/kakoune-config/autoload/wordcount.kak"
}

plug "https://gitlab.com/Screwtapello/kakoune-state-save" config %{
    # WARNING: state-save-reg-load has security implications
    # hook global KakBegin .* %{
    #     state-save-reg-load colon
    #     state-save-reg-load pipe
    #     state-save-reg-load slash
    # }

    hook global KakEnd .* %{
        state-save-reg-save colon
        # state-save-reg-save pipe
        state-save-reg-save slash
    }
}

plug "occivink/kakoune-snippets" config %{
    set-option -add global snippets_directories "%opt{plug_install_dir}/kakoune-snippet-collection/snippets"
    set-option -add global snippets_directories "%val{config}/snippets"
}
plug "andreyorst/kakoune-snippet-collection" noload

plug "https://gitlab.com/FlyingWombat/case.kak" config %{
    map global normal '`' ': enter-user-mode case<ret>'
}

# Use gnome-terminal
hook global ModuleLoaded x11 %{
    set-option global termcmd "gnome-terminal -e"
}

#########################################################################
# Clipboard
#########################################################################
# System copy
declare-option -hidden str system_copy_cmd %sh{
    if command -v xclip 1>/dev/null 2>&1; then
        printf %s 'xclip -in -selection clipboard >&- 2>&-'
    elif command -v pbcopy 1>/dev/null 2>&1; then
        printf %s 'pbcopy'
    elif command -v clip.exe 1>/dev/null 2>&1; then
        printf %s 'clip.exe'
    else
        printf false
    fi
}

# System paste
declare-option -hidden str system_paste_cmd %sh{
    if command -v xclip 1>/dev/null 2>&1; then
        printf %s 'xclip -out -selection clipboard'
    elif command -v pbcopy 1>/dev/null 2>&1; then
        printf %s 'pbpaste'
    elif command -v clip.exe 1>/dev/null 2>&1; then
        printf %s "powershell.exe Get-Clipboard | tr -d '\r'"
    else
        printf false
    fi
}

# Use the system clipboard
hook global RegisterModified '"' %{ nop %sh{
    # TODO: Use $kak_opt_system_copy_cmd
    printf %s "$kak_main_reg_dquote" | xclip -in -selection clipboard >&- 2>&-
}}

# Paste before/after
map global user -docstring 'paste (before) from system clipboard' P '!$kak_opt_system_paste_cmd<ret>'
map global user -docstring 'paste (after) from system clipboard' p '<a-!>$kak_opt_system_paste_cmd<ret>'

# <tab> for completion
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        hook -once -always window InsertCompletionHide .* %{
            unmap window insert <tab> <c-n>
            unmap window insert <s-tab> <c-p>
        }
    }
}

# IM制御を行う
map global insert <esc> '<esc>:iminactive<ret>'

define-command iminactive %{
    nop %sh{
        ibus engine xkb:us::eng
    }
}

#########################################################################
# Kakoune user interface
#########################################################################
add-highlighter global/ number-lines -hlcursor

# Set 7 lines to the cursor - when moving vertivally using j/k
set global scrolloff 7,0

# Ignore case where searching
map global normal / ':exec /<ret>(?i)'
# Define simple fuzzy file picker
def find -params 1 -shell-script-candidates %{ find . -type f } %{ edit %arg{1} }

# Highlight search results
set-face global search +bi
add-highlighter global/search dynregex '%reg{/}' 0:search

# Show matching brackets when text indicator is over them
add-highlighter global/ show-matching

hook global WinCreate ^[^*]+$ %{ evaluate-commands %sh{
    cd "$(dirname "${kak_buffile}")" && git ls-files --error-unmatch "${kak_bufname}" >/dev/null 2>&1
    is_git_tracked=$?
    if [ "${is_git_tracked}" -eq 0 ]; then
        # git diff status in gutter
        printf %s 'git show-diff'
    fi
}}

hook global BufWritePost ^[^*]+$ %{ evaluate-commands %sh{
    cd "$(dirname "${kak_buffile}")" && git ls-files --error-unmatch "${kak_bufname}" >/dev/null 2>&1
    is_git_tracked=$?
    if [ "${is_git_tracked}" -eq 0 ]; then
        # Update git diff in gutter
        printf %s 'git update-diff'
    fi
}}


#########################################################################
# Colors and Fonts
#########################################################################
colorscheme the_future2
# set-option global ui_options 'ncurses_assistant=cat'


#########################################################################
# Text, tab and indent related
#########################################################################
# EOL = lf
set-option global eolformat lf

# Use 2 spaces instead of tabs
map global insert <tab> '<a-;><a-gt>'
map global insert <s-tab> '<a-;><a-lt>'

# 1 tab == 2 spaces
set-option global indentwidth 2

# Linebreak on 72 characters
hook global WinSetOption filetype=.* %{
    set window autowrap_column 72
    autowrap-enable
}

# Wrap lines
add-highlighter global/ wrap -indent -marker '→'

# Trim trailing whitespace and EOF newlines
hook global BufWritePre ^[^*]+$ -group editorconfig-hooks %{
    try %{ execute-keys -draft %{ %s\h+$|\n+\z<ret>d } }
}

#########################################################################
# Moving around, tabs, windows and buffers
#########################################################################
# Return to last edit position when opening files (You want this!)
# https://gitlab.com/Screwtapello/kakoune-state-save


#########################################################################
# Custom mapping
#########################################################################
map global user -docstring 'Open in nvim' v ':terminal nvim "+%val{cursor_line}" "%val{buffile}"<ret>'
map global user -docstring '(un)comment selected lines using line comments' c ':comment-line<ret>'
map global user -docstring '(un)comment selections using block comments' C ':comment-block<ret>'
map global user -docstring 'Sort selection' s '|sort<ret>'
map global user -docstring 'Select non-ASCII characters from buffer' n '%s[^\x00-\x7F]<ret>'

#########################################################################
# Custom commands
#########################################################################
define-command now %{
    execute-keys '| date --iso-8601=seconds<ret>'
}

# Highlight the word under the cursor
# Based on: https://github.com/mawww/config/blob/1f18846ad5aecb4c75e3b5142203a4a68a3bc994/kakrc#L41-L53
set-face global CurWord default,rgba:3a3d4140

hook global NormalIdle .* %{
    eval -draft %{ try %{
        exec <space><a-i>w <a-k>\A\w+\z<ret>
        add-highlighter -override global/curword regex "\b\Q%val{selection}\E\b" 0:CurWord
    } catch %{
        add-highlighter -override global/curword group
    } }
}

#########################################################################
## Language specific
#########################################################################
# EditorConfig
hook global WinCreate ^[^*]+$ %{editorconfig-load}

# Multi-language formatter
hook global BufSetOption filetype=(css|javascript|json|yaml) %{
    set-option buffer formatcmd "npx prettier --stdin-filepath=%val{buffile}"
}

# CSS
hook global WinSetOption filetype=css %{
    set window autowrap_column 120

    set-option window lintcmd "npx stylelint --formatter unix --stdin-filename='%val{buffile}'"
    lint
}

# Fish
hook global WinSetOption filetype=fish %{
    set-option global indentwidth 4
    set window autowrap_column 80
}

hook global BufSetOption filetype=fish %{
    set-option buffer formatcmd "fish_indent"
}

# HTML
hook global WinSetOption filetype=html %{
    set window autowrap_column 68

    set-option window lintcmd "tidy -e --gnu-emacs yes --quiet yes 2>&1"
    lint

    set-option buffer formatcmd "run(){ tidy -q --tidy-mark no --indent auto --preserve-entities yes --join-classes yes --priority-attributes 'class id name data-* src for type href value title alt role aria-*' --sort-attributes alpha --alt-text 'FIXME' --indent-spaces %opt{tabstop}  2>/dev/null || true; } && run"
}

# Javascript
hook global WinSetOption filetype=javascript %{
    set-option window lintcmd 'run() { cat "$1" | npx eslint -f unix --stdin --stdin-filename "$kak_buffile";} && run'
}

# JSON
hook global WinSetOption filetype=json %{
    set window autowrap_column 80

    set-option window lintcmd %{ run() { cat -- "$1" | jq 2>&1 | awk -v filename="$1" '/ at line [0-9]+, column [0-9]+$/ { line=$(NF - 2); column=$NF; sub(/ at line [0-9]+, column [0-9]+$/, ""); printf "%s:%d:%d: error: %s", filename, line, column, $0; }'; } && run }
    lint
}

# Markdown
hook global WinSetOption filetype=markdown %{
    set-option window lintcmd "proselint"
    lint
}

hook global BufSetOption filetype=markdown %{
    set-option buffer formatcmd 'pandoc -f markdown_mmd -t markdown_mmd'
}

# Python
hook global WinSetOption filetype=python %{
    set-option global indentwidth 4
    set window autowrap_column 79

    jedi-enable-autocomplete
    set-option window lintcmd "mypy --show-column-numbers"
    lint
}

hook global BufSetOption filetype=python %{
    set-option buffer formatcmd 'black -'
}

# Ruby
hook global WinSetOption filetype=ruby %{
    set window autowrap_column 80

    set-option window lintcmd 'rubocop -l --format emacs'
    lint
}

hook global BufSetOption filetype=ruby %{
    set-option buffer formatcmd "rubocop -x -o /dev/null -s '${kak_buffile}' | sed -n '2,$p'"
}

# Shell
hook global WinSetOption filetype=sh %{
    set-option global indentwidth 4
    set window autowrap_column 80

    set-option window lintcmd 'shellcheck -fgcc -Cnever'
    lint

    set-option buffer formatcmd "shfmt -p -i 4 -bn -ci"
}

# YAML
hook global WinSetOption filetype=yaml %{
    set window autowrap_column 80

    set-option window lintcmd "yamllint -f parsable"
    lint
}
